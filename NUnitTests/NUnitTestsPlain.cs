using NUnit.Framework;
using System.Collections.Concurrent;
using CoreCalc;

namespace NUnitTests
{
    public class NUnitTestsPlain
    {


        /* 
User replace settings section in the options:

	numb=num
	bull=bool

Heuristics
	Get + .... (and it's a method name)
	Then we could check the .... against all the known types.
	Look for a really strong match.
         */

        // TODO: 
        [SetUp]
        public void Setup()
        {
            
        }

        

        [Test]
        public void Test1()
        {
            List<string> list = new List<string>();
            Calculator calculator = new Calculator();
            Assert.IsNotNull(calculator);
            Assert.That(calculator.AddTwoNumbers(11, 12), Is.EqualTo(23));
            Assert.That(calculator.AddTwoNumbers(3, 4), Is.EqualTo(7));
            Assert.That(calculator.AddTwoNumbers(4, 3), Is.EqualTo(7));
            
        }

        [Test]
        public void TestNumSegmentsNeeded()
        {
            AssertSegmentsMatch("a?b?", 2);
            AssertSegmentsMatch("?b?Circus", 2);
            AssertSegmentsMatch("?b?", 1);
            AssertSegmentsMatch("a?b?Circus", 3);
            AssertSegmentsMatch("a?b?Circus?d?e", 5);
            AssertSegmentsMatch("?a??b?", 2);
            AssertSegmentsMatch("a?b??Circus?", 3);
            AssertSegmentsMatch("a?b??Circus?d", 4);
            AssertSegmentsMatch("?a??b??Circus?d", 4);
            AssertSegmentsMatch("a?b??Circus??d?", 4);
            AssertSegmentsMatch("?One??Two?", 2);
        }


        // Hello. Hello. Hello.
        private static void AssertSegmentsMatch(string templateName, int expectedSegments)
        {
            int numSegmentsNeeded = Calculator.GetNumSegmentsNeeded(templateName);
            Assert.That(numSegmentsNeeded, Is.EqualTo(expectedSegments));
            double testDouble = 1;
            if (testDouble == 1.234)
                testDouble = 4.321;
            string myStr = $"Hello. Hello. Hello.";
            const string availableIntellisense = """
                numSegmentsNeeded (System.Int32) {CompareTo(), Equals(), GetHashCode(), GetTypeCode(), ToBoolean(), ToByte(), ToChar(), ToDateTime(), ToDecimal(), ToDouble(), ToInt16(), ToInt32(), ToInt64(), ToSByte(), ToSingle(), ToType(), ToUInt16(), ToUInt32(), ToUInt64(), GetByteCount(), GetShortestBitLength(), TryWriteBigEndian(), TryWriteLittleEndian(), ToString(), TryFormat()}
                myStr (System.String) {get_Chars(), get_Length(), Clone(), CompareTo(), Contains(), CopyTo(), EndsWith(), EnumerateRunes(), Equals(), GetEnumerator(), GetHashCode(), GetPinnableReference(), GetTypeCode(), IndexOf(), IndexOfAny(), Insert(), IsNormalized(), LastIndexOf(), LastIndexOfAny(), Normalize(), PadLeft(), PadRight(), Remove(), Replace(), ReplaceLineEndings(), Split(), StartsWith(), Substring(), ToBoolean(), ToByte(), ToChar(), ToDateTime(), ToDecimal(), ToDouble(), ToInt16(), ToInt32(), ToInt64(), ToSByte(), ToSingle(), ToType(), ToUInt16(), ToUInt32(), ToUInt64(), ToCharArray(), ToLower(), ToLowerInvariant(), ToString(), ToUpper(), ToUpperInvariant(), Trim(), TrimEnd(), TrimStart(), TryCopyTo(), this[], Length}
                testDouble (System.Double) {CompareTo(), Equals(), GetHashCode(), GetTypeCode(), ToBoolean(), ToByte(), ToChar(), ToDateTime(), ToDecimal(), ToDouble(), ToInt16(), ToInt32(), ToInt64(), ToSByte(), ToSingle(), ToType(), ToUInt16(), ToUInt32(), ToUInt64(), GetExponentByteCount(), GetExponentShortestBitLength(), GetSignificandBitLength(), GetSignificandByteCount(), TryWriteExponentBigEndian(), TryWriteExponentLittleEndian(), TryWriteSignificandBigEndian(), TryWriteSignificandLittleEndian(), ToString(), TryFormat()}
                templateName (System.String) {}
                expectedSegments (System.Int32) {}
                NUnitTestsPlain (NUnitTests.NUnitTestsPlain) {Setup(), Test1(), TestNumSegmentsNeeded()}
                AutoGeneratedProgram (AutoGeneratedProgram) {}
                ActionTargets (NUnit.Framework.ActionTargets) {}
                Assert (NUnit.Framework.Assert) {}
                TestDelegate (NUnit.Framework.TestDelegate) {Invoke(), BeginInvoke(), EndInvoke()}
                """;
        }
    }
}